# -*- coding: utf-8 -*-
"""K - Means Clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z2S0CoiW6z-3p3OJpOrEgl0pim3h2T8d

# K-Means Clustering

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import random

"""## Importing the dataset"""
dataset = pd.read_csv('Mall_Customers_Files.csv')
x = dataset.iloc[:, [3,4]].values

print("Matrix of Features : \n",x)

"""## Using the elbow method to find the optimal number of clusters"""

from sklearn.cluster import KMeans
wcss = []
for i in range(1, 11) :
  kmeans = KMeans(n_clusters = i, init = "k-means++", random_state = 42)
  kmeans.fit(x)
  wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

print("Within Cluster Sum of Squares : \n",wcss)

length = len(wcss)
diff_wcss = []
for i in range(0, length) :
  if i == length-1 :
      break
  else :
      difference = wcss[i] - wcss[i+1]
      diff_wcss.append(difference)
print("Difference of Within Cluster Sum of Squares : \n",diff_wcss)
avg = sum(diff_wcss)/len(diff_wcss)
print("Average of Difference of Within Cluster Sum of Squares : \n",avg)

"""## Training the K-Means model on the dataset"""

for i in range(0, len(diff_wcss)):
  if diff_wcss[i] < avg :
    cluster = i+1
    break
print("Number of Clusters : ",cluster)
kmeans = KMeans(n_clusters = cluster, init = "k-means++", random_state = 42)
y_kmeans = kmeans.fit_predict(x)

print("Dependent Variable Vector of the K - Means Algorithm : \n",y_kmeans)

"""## Visualising the clusters"""

number_of_colors = cluster
color = ["#"+''.join([random.choice('0123456789ABCDEF') for j in range(6)]) for i in range(number_of_colors)]
for i in range(0, len(color)) :
  plt.scatter(x[y_kmeans == i, 0], x[y_kmeans == i, 1], s = 100, c = color[i], label = 'Cluster')
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 300, c = 'black', label = 'Centroids')
plt.title('Clusters of Customers')
plt.xlabel('Annual Income(k$)')
plt.ylabel('Spending Score(1 - 100)')
plt.show()